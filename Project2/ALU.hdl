// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    /* X Operation */

    /* Set x to 0 */
    And16(a=x , b=false , out=zeroX );
    Mux16(a=x , b=zeroX , sel=zx , out=Xoper1 );

    /* Negate x */
    Not16(in=Xoper1 , out=NotXoper1 );
    Mux16(a=Xoper1 , b=NotXoper1 , sel=nx , out=Xoper2 );

    /* Set y to 0 */
    And16(a=y , b=false , out=zeroY );
    Mux16(a=y , b=zeroY , sel=zy , out=Yoper1 );

    /* Negate y */
    Not16(in=Yoper1 , out=NotYoper1 );
    Mux16(a=Yoper1 , b=NotYoper1 , sel=ny , out=Yoper2 );

    /* x+y */
    Add16(a =Xoper2 , b =Yoper2 , out =AddXY );
    /* x&y */
    And16(a=Xoper2 , b=Yoper2 , out=AndXY );
    Mux16(a=AndXY , b=AddXY , sel=f , out=Outf );

    /* Negate Out */
    Not16(in=Outf , out=NotOutf );
    Mux16(a=Outf , b=NotOutf , sel=no , out=out );
    Mux16(a=Outf , b=NotOutf , sel=no , out[0..7]=lsb, out[7..14]=msb, out[15]=signBit  );

    /* Check zero */
    Or8Way(in=lsb , out=lsb8way );
    Or8Way(in=msb , out=msb8way );
    Or(a=lsb8way , b=msb8way , out=orTemp );
    Or(a=orTemp , b=signBit , out=zrTemp );
    Not(in=zrTemp , out=zr );

    /* Check Negative */
    Mux(a=false , b=true , sel=signBit , out=ng );
}